{
  parserClass="com.gman.idea.plugin.concordion.lang.ConcordionParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Concordion"
  psiImplClassSuffix="Impl"
  psiPackage="com.gman.idea.plugin.concordion.lang.psi"
  psiImplPackage="com.gman.idea.plugin.concordion.lang.psi"

  elementTypeHolderClass="com.gman.idea.plugin.concordion.lang.psi.ConcordionTypes"
  elementTypeClass="com.gman.idea.plugin.concordion.lang.ConcordionElementType"
  tokenTypeClass="com.gman.idea.plugin.concordion.lang.ConcordionTokenType"

  psiImplUtilClass="com.gman.idea.plugin.concordion.lang.ConcordionPsiUtils"

  tokens = [
    LPARENTH="("
    RPARENTH=")"
    LBRACKET="["
    RBRACKET="]"
    DOT="."
    COMA=","
    HASH="#"
    EQ="="
    COLON=":"
    SEMICOLON=";"
  ]
}

file ::= (concordionExpression ';'?)*

concordionExpression ::= concordionSetExpression|concordionIterateExpression|ognlExpression;

concordionSetExpression ::= variable '=' ognlExpression
concordionIterateExpression ::= variable ':' ognlExpression

ognlExpression ::= (literal|method|field|variable) index? ('.' ognlExpression)*

literal ::= (STRING_LITERAL|CHARACTER_LITERAL|DOUBLE_LITERAL|INTEGER_LITERAL)
method ::= IDENTIFIER '(' arguments ')' {methods=[getReferences getMethodName getMethodParametersCount]}
field ::= IDENTIFIER {methods=[getReferences getFieldName]}
variable ::= '#' IDENTIFIER

arguments ::= ognlExpression? (',' ognlExpression)*
index ::= '[' ognlExpression ']'