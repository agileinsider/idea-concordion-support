/* The following code was generated by JFlex 1.4.3 on 9/8/15 9:12 PM */

package com.gman.idea.plugin.concordion.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.gman.idea.plugin.concordion.lang.psi.ConcordionTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/8/15 9:12 PM from the specification file
 * <tt>/home/gman/Projects/ConcordionSupport/src/com/gman/idea/plugin/concordion/lang/concordion.flex</tt>
 */
class ConcordionLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\3\1\13\1\0\1\3\1\13\16\4\4\0\1\3\2\0"+
    "\1\21\1\4\2\0\1\11\1\14\1\15\1\0\1\10\1\20\1\10"+
    "\1\6\1\0\1\5\11\2\1\23\1\24\1\0\1\22\3\0\4\1"+
    "\1\7\25\1\1\16\1\12\1\17\1\0\1\4\1\0\4\1\1\7"+
    "\25\1\4\0\41\4\2\0\4\4\4\0\1\1\2\0\1\4\7\0"+
    "\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0"+
    "\14\1\16\0\5\1\7\0\1\1\1\0\1\1\21\0\160\4\5\1"+
    "\1\0\2\1\2\0\4\1\10\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\24\1\1\0\123\1\1\0\213\1\1\0\5\4\2\0\236\1"+
    "\11\0\46\1\2\0\1\1\7\0\47\1\7\0\1\4\1\0\55\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\1"+
    "\5\0\3\1\15\0\5\4\6\0\1\4\4\0\13\4\5\0\53\1"+
    "\37\4\4\0\2\1\1\4\143\1\1\0\1\1\10\4\1\0\6\4"+
    "\2\1\2\4\1\0\4\4\2\1\12\4\3\1\2\0\1\1\17\0"+
    "\1\4\1\1\1\4\36\1\33\4\2\0\131\1\13\4\1\1\16\0"+
    "\12\4\41\1\11\4\2\1\4\0\1\1\5\0\26\1\4\4\1\1"+
    "\11\4\1\1\3\4\1\1\5\4\22\0\31\1\3\4\104\0\1\1"+
    "\1\0\13\1\67\0\33\4\1\0\4\4\66\1\3\4\1\1\22\4"+
    "\1\1\7\4\12\1\2\4\2\0\12\4\1\0\7\1\1\0\7\1"+
    "\1\0\3\4\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"+
    "\1\0\1\1\3\0\4\1\2\0\1\4\1\1\7\4\2\0\2\4"+
    "\2\0\3\4\1\1\10\0\1\4\4\0\2\1\1\0\3\1\2\4"+
    "\2\0\12\4\2\1\2\4\7\0\1\4\5\0\3\4\1\0\6\1"+
    "\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4"+
    "\3\0\1\4\7\0\4\1\1\0\1\1\7\0\14\4\3\1\1\4"+
    "\13\0\3\4\1\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1"+
    "\1\0\2\1\1\0\5\1\2\0\1\4\1\1\10\4\1\0\3\4"+
    "\1\0\3\4\2\0\1\1\17\0\2\1\2\4\2\0\12\4\1\0"+
    "\1\4\17\0\3\4\1\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\2\0\1\4\1\1\7\4\2\0"+
    "\2\4\2\0\3\4\10\0\2\4\4\0\2\1\1\0\3\1\2\4"+
    "\2\0\12\4\1\0\1\1\20\0\1\4\1\1\1\0\6\1\3\0"+
    "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\2\1\3\0\3\1\3\0\14\1\4\0\5\4\3\0\3\4\1\0"+
    "\4\4\2\0\1\1\6\0\1\4\16\0\12\4\11\0\1\4\7\0"+
    "\3\4\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0"+
    "\5\1\3\0\1\1\7\4\1\0\3\4\1\0\4\4\7\0\2\4"+
    "\1\0\2\1\6\0\2\1\2\4\2\0\12\4\22\0\2\4\1\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\2\0"+
    "\1\4\1\1\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0"+
    "\1\1\1\0\2\1\2\4\2\0\12\4\1\0\2\1\17\0\2\4"+
    "\1\0\10\1\1\0\3\1\1\0\51\1\2\0\1\1\7\4\1\0"+
    "\3\4\1\0\4\4\1\1\10\0\1\4\10\0\2\1\2\4\2\0"+
    "\12\4\12\0\6\1\2\0\2\4\1\0\22\1\3\0\30\1\1\0"+
    "\11\1\1\0\1\1\2\0\7\1\3\0\1\4\4\0\6\4\1\0"+
    "\1\4\1\0\10\4\22\0\2\4\15\0\60\1\1\4\2\1\7\4"+
    "\4\0\1\4\7\1\10\4\1\0\12\4\47\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1"+
    "\1\4\2\1\6\4\1\0\2\4\1\1\2\0\5\1\1\0\1\1"+
    "\1\0\6\4\2\0\12\4\2\0\4\1\40\0\1\1\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\1\1\0\44\1\4\0\24\4\1\0\2\4\5\1\13\4\1\0"+
    "\44\4\11\0\1\4\71\0\53\1\24\4\1\1\12\4\6\0\6\1"+
    "\4\4\4\1\3\4\1\1\3\4\2\1\7\4\3\1\4\4\15\1"+
    "\14\4\1\1\17\4\2\0\46\1\1\0\1\1\5\0\1\1\2\0"+
    "\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1\1\0"+
    "\4\1\2\0\103\1\2\0\3\4\40\0\20\1\20\0\125\1\14\0"+
    "\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\3\0\3\4\17\0"+
    "\15\1\1\0\4\1\3\4\13\0\22\1\3\4\13\0\22\1\2\4"+
    "\14\0\15\1\1\0\3\1\1\0\2\4\14\0\64\1\40\4\3\0"+
    "\1\1\3\0\1\4\1\1\1\4\2\0\12\4\41\0\3\4\2\0"+
    "\12\4\6\0\130\1\10\0\51\1\1\4\1\1\5\0\106\1\12\0"+
    "\35\1\3\0\14\4\4\0\14\4\12\0\12\4\36\1\2\0\5\1"+
    "\13\0\54\1\4\0\21\4\7\1\2\4\6\0\12\4\46\0\27\1"+
    "\5\4\4\0\65\1\12\4\1\0\35\4\2\0\13\4\6\0\12\4"+
    "\15\0\1\1\130\0\5\4\57\1\21\4\7\1\4\0\12\4\21\0"+
    "\11\4\14\0\3\4\36\1\15\4\2\1\12\4\54\1\16\4\14\0"+
    "\44\1\24\4\10\0\12\4\3\0\3\1\12\4\44\1\122\0\3\4"+
    "\1\0\25\4\4\1\1\4\4\1\3\4\2\1\11\0\300\1\47\4"+
    "\25\0\4\4\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0"+
    "\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\16\0"+
    "\5\4\32\0\5\4\20\0\2\4\23\0\1\4\13\0\5\4\5\0"+
    "\6\4\1\0\1\1\15\0\1\1\20\0\15\1\3\0\33\4\25\0"+
    "\15\4\4\0\1\4\3\0\14\4\21\0\1\1\4\0\1\1\2\0"+
    "\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0"+
    "\1\1\21\0\43\4\2\1\4\4\u0a77\0\57\1\1\0\57\1\1\0"+
    "\205\1\6\0\4\1\3\4\2\1\14\0\46\1\1\0\1\1\5\0"+
    "\1\1\2\0\70\1\7\0\1\1\17\0\1\4\27\1\11\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\40\4\57\0\1\1\u01d5\0\2\1"+
    "\1\4\31\0\17\4\1\0\5\1\2\0\3\4\2\1\4\0\126\1"+
    "\2\0\2\4\2\0\3\1\1\0\132\1\1\0\4\1\5\0\51\1"+
    "\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1"+
    "\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\4\2\1"+
    "\24\0\57\1\1\4\4\0\12\4\1\0\31\1\7\0\1\4\106\1"+
    "\14\4\45\0\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0"+
    "\13\1\115\0\12\1\1\4\3\1\1\4\4\1\1\4\27\1\5\4"+
    "\20\0\1\4\7\0\64\1\14\0\2\4\62\1\21\4\13\0\12\4"+
    "\6\0\22\4\6\1\3\0\1\1\4\0\12\4\34\1\10\4\2\0"+
    "\27\1\15\4\14\0\35\1\3\0\4\4\57\1\16\4\16\0\1\1"+
    "\12\4\46\0\51\1\16\4\11\0\3\1\1\4\10\1\2\4\2\0"+
    "\12\4\6\0\27\1\3\0\1\1\1\4\4\0\60\1\1\4\1\1"+
    "\3\4\2\1\2\4\5\1\2\4\1\1\1\4\1\1\30\0\3\1"+
    "\2\0\13\1\5\4\2\0\3\1\2\4\12\0\6\1\2\0\6\1"+
    "\2\0\6\1\11\0\7\1\1\0\7\1\221\0\43\1\10\4\1\0"+
    "\2\4\2\0\12\4\6\0\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0"+
    "\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0\1\1\1\4"+
    "\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0"+
    "\14\1\1\4\3\0\20\4\20\0\7\4\14\0\2\4\30\0\3\4"+
    "\31\0\1\4\6\0\5\1\1\0\207\1\2\0\1\4\4\0\1\4"+
    "\13\0\12\4\7\0\32\1\4\0\1\4\1\0\32\1\13\0\131\1"+
    "\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\2\4"+
    "\3\0\2\4\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\0\2\6\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[23];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\25\0\52\0\77\0\124\0\151\0\176\0\223"+
    "\0\25\0\25\0\25\0\25\0\25\0\25\0\25\0\25"+
    "\0\25\0\250\0\275\0\151\0\25\0\322\0\347";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[23];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\3"+
    "\1\2\1\10\1\2\1\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\26\0\2\3\1\0"+
    "\2\3\1\0\1\3\17\0\1\4\2\0\1\4\1\22"+
    "\1\23\20\0\1\5\7\0\1\5\13\0\1\24\2\0"+
    "\1\24\1\22\1\23\17\0\1\22\2\0\1\22\17\0"+
    "\11\10\1\25\1\26\1\0\11\10\2\0\1\22\2\0"+
    "\1\22\1\0\1\23\17\0\1\27\2\0\1\27\2\0"+
    "\1\27\14\0\13\10\1\0\11\10\2\0\1\27\2\0"+
    "\1\27\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\11\11\2\1\1\0\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[23];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public ConcordionLexer(){
    this((java.io.Reader)null);
  }

  int braceCount;


  ConcordionLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ConcordionLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return ConcordionTypes.LPARENTH;
          }
        case 17: break;
        case 14: 
          { return ConcordionTypes.COLON;
          }
        case 18: break;
        case 3: 
          { return ConcordionTypes.INTEGER_LITERAL;
          }
        case 19: break;
        case 5: 
          { return ConcordionTypes.DOT;
          }
        case 20: break;
        case 9: 
          { return ConcordionTypes.LBRACKET;
          }
        case 21: break;
        case 13: 
          { return ConcordionTypes.EQ;
          }
        case 22: break;
        case 10: 
          { return ConcordionTypes.RBRACKET;
          }
        case 23: break;
        case 8: 
          { return ConcordionTypes.RPARENTH;
          }
        case 24: break;
        case 11: 
          { return ConcordionTypes.COMA;
          }
        case 25: break;
        case 12: 
          { return ConcordionTypes.HASH;
          }
        case 26: break;
        case 16: 
          { return ConcordionTypes.DOUBLE_LITERAL;
          }
        case 27: break;
        case 1: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 28: break;
        case 6: 
          { return ConcordionTypes.STRING_LITERAL;
          }
        case 29: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 30: break;
        case 15: 
          { return ConcordionTypes.SEMICOLON;
          }
        case 31: break;
        case 2: 
          { return ConcordionTypes.IDENTIFIER;
          }
        case 32: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
